# azure-pipelines.yml

trigger:
- main  # Ejecuta este pipeline cada vez que haya un push a la rama 'main'

schedules:
- cron: "0 12 * * *"  # <--- ESTO ES "A LAS 6:00 AM"
  displayName: 'Ejecución Diaria 6am'
  branches:
    include:
    - main # Especifica qué rama debe ejecutar
  always: true # Poner 'true' asegura que se ejecute haya o no haya cambios nuevos en el código

pool:
  vmImage: 'ubuntu-latest' # Usa una máquina virtual con Ubuntu

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '18.x' # Especifica la versión de Node.js que usa tu proyecto
  displayName: 'Install Node.js 18'

- script: |
    npm ci
  displayName: 'Install dependencies (npm ci)'

- script: |
    npx playwright install --with-deps
  displayName: 'Install Playwright browsers'

# Este paso ahora es más simple, sin el bloque 'env'
- script: |
    npx playwright test tests/TimeSlotScraper.spec.js
  displayName: 'Run Playwright tests (TimeSlots)'

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: 'reports\reporteSucursales.xml' # Ruta del archivo que definimos en playwright.config.js
    mergeTestResults: true
    failTaskOnFailedTests: true # Hace que el pipeline falle si alguna prueba falla
  displayName: 'Publish Test Results'
  condition: always() # Ejecuta este paso siempre, incluso si el paso 'npm test' falló
